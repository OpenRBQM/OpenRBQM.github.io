---
title: "Packages"
---

```{r load_packages}
#| echo: FALSE
#| include: FALSE

# Load necessary libraries
library(httr)
library(jsonlite)
library(dplyr)
library(purrr)
library(glue)
```

# Overview

The OpenRBQM framework is designed to provide a robust and flexible solution for risk-based quality management. It includes a variety of packages that help streamline processes and ensure compliance with industry standards.

# Packages 
```{r get_packages, echo=FALSE, results = "asis"}
#| echo: false
#| warnings: false 

# Function to get package names from a GitHub repository
get_packages <- function(org) {
    url <- paste0("https://api.github.com/orgs/", org, "/repos")
    response <- GET(url)
    content <- content(response, as = "text")
    json <- fromJSON(content)
    return(json)
}

# Repositories to pull packages from
orgs <- c("openrbqm", "gilead-biostats")

# Get packages from each repository
packages <- orgs %>% map(get_packages) %>% bind_rows
   
packages %>% glue_data('- [{full_name}]({html_url}) {description}', close='\n')

```

# Articles

```{r define article functions, echo=FALSE, results = "asis"}
get_articles <- function(repo, pkg) {
    url <- paste0("https://api.github.com/repos/",repo,"/",pkg,"/contents/vignettes")
    response <- GET(url)
    content <- content(response, as = "text")
    json <- fromJSON(content) %>%
      dplyr::filter(grepl("Rmd", name))
    return(json)
}

get_meta <- function(article, field) {
  field_line <- article[grep(paste0(field,": "), article)[1]]
  if(length(field_line) > 0) {
    clean_field <- gsub(paste0(field,": "), "", field_line)
    clean_field <- gsub('\"', "", clean_field)
  } else {
    clean_field <- NA
  }
  return(clean_field)
}
```

## OpenRBQM

```{r get_openrbqm_articles, echo=FALSE, results = "asis"}

openrbqm_articles <- get_articles("OpenRBQM","openrbqm")

#get article text
articles <- purrr::map(gsm_articles$download_url, \(.x) readLines(.x))
names(articles) <- gsm_articles$name

#add title and description to data
purrr::map(names(articles), \(.x) {
  gsm_articles$description[gsm_articles$name == .x] <<- get_meta(articles[[.x]], 
                                                                        "description")
  gsm_articles$title[gsm_articles$name == .x] <<- get_meta(articles[[.x]],
                                                                  "title")
})

##output names, descriptions and links
gsm_articles %>% glue_data('- [{title}](https://openrbqm.github.io/openrbqm/articles/{name}) {description}', close='\n')
```

## gsm.core 

```{r get_gsm_articles, echo=FALSE, results = "asis"}

gsm_articles <- get_articles("Gilead-BioStats","gsm")

#get article text
articles <- purrr::map(gsm_articles$download_url, \(.x) readLines(.x))
names(articles) <- gsm_articles$name

#add title and description to data
purrr::map(names(articles), \(.x) {
  gsm_articles$description[gsm_articles$name == .x] <<- get_meta(articles[[.x]], 
                                                                        "description")
  gsm_articles$title[gsm_articles$name == .x] <<- get_meta(articles[[.x]],
                                                                  "title")
})

##output names, descriptions and links
gsm_articles %>% glue_data('- [{title}](https://gilead-biostats.github.io/gsm/articles/{name}) {description}', close='\n')
```

# Examples
